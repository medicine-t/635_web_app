# グループ2
本プロジェクトで作成した635法(web)はHTTPサーバーとGUIクライアントに分かれています。
それぞれの実行の方法について以下で記述します。

## フォルダ構成
- /
  - api_server/
  - client/
  - .gitignore
  - compose.yml
  - README.txt(本ファイル)
以下の記述ではカレントディレクトリが`<PATH TO WORK DIR>/` であることを前提としています。
　また、動作はconda環境で確認しています。

## サーバーの立ち上げ
APIを提供するHTTPサーバー(以降APIサーバー)はdocker composeでの実行を想定しています。
APIサーバーを立ち上げるにはカレントディレクトリで
docker compose up -d
とすることで起動することができます。
初回の起動はdockerイメージのダウンロードやイメージのビルドのためある程度時間が必要です。

## GUIクライアントの起動
使用しているライブラリはtkinter,datetime,requests,dotenv,(unitteset)です。
この内外部ライブラリはrequests,dotenvです。
requests,dotenvは以下のコマンドでインストールが可能です
`conda install requests python-dotenv -c conda-forge'

クライアントは
python client/app/app.py
で起動することができます。また、異なるターミナルなどで複数起動することが可能です。

現在はホストユーザーが部屋を作成した後に他ユーザーがアプリケーションを起動する必要があります。

### GUIクライアントの定数について
- フェーズの更新時間の変更
  本来、635法のシートの更新は5分(300秒)ごとですが、5分の長さは動作確認に支障を与えます。そのため、client/app/controllers.py:20に設定しているINTERVALを変更することで更新時間を変更することができます。
  現在は10秒に設定されています。

## 1端末で動作確認をする方法
本来複数人での仕様を前提としている本アプリケーションですが、単一の端末で最後まで動作を確認する方法がいくつかあります。
- クライアントを計6個立ち上げる。
- client/utils/ 以下のファイルを利用する。
  - to_room_full.py (最新のルームのメンバーを満員にする)
  - send_ideas.py (記入フェーズの最新のルームにおいて、シートを全て送信済み状態にする)
  - send_evals.py (評価フェーズの最新のルームにおいて、シートを全て送信済み状態にする)
- これらを使用することで1端末で全体の動作を確認することができます。

## 外部のAPIサーバーへ接続する方法
client/app/.envに記載している
API_HOST="http://localhost"
を適切なURLへ変更した上でクライアントを起動することで外部APIサーバーへ接続できます。